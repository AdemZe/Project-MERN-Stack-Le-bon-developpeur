name: Pipeline CI/CD Backend-api

env:
  BUILD_NUMBER: ${{ github.run_number }}
  IMAGE_NAME: backend-api
  BACKEND_URL: "https://api.lebondeveloppeur.net"  

on:
  push:
    branches:
      - main

jobs:
  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

  sonarqube-scan-job:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  security-scan:
    runs-on: ubuntu-latest
    needs: sonarqube-scan-job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependency Scanning Tool
        run: npm install -g snyk

      - name: Run Snyk Vulnerability Scan
        run: snyk test

  build-and-push-job:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker image with specific version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Push Docker image with specific version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Tag Docker image with latest version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image with latest version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-job:
    runs-on: ubuntu-latest
    needs: build-and-push-job
    steps:
      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /home/ubuntu/devops-scripts/api
            sudo git pull
            sudo docker compose pull
            sudo docker compose up -d --force-recreate --remove-orphans
            sudo docker image prune -af

  health-check-job:
    runs-on: ubuntu-latest
    needs: deploy-job
    steps:
      - name: Health Check - Verify Backend Availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.BACKEND_URL }}/health)
          echo "Received response code: $response"
          if [ "$response" -ne 200 ]; then
            echo "Health check failed with response code $response"
            exit 1
          else
            echo "Health check passed successfully!"
          fi

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚úÖ *Pipeline CI/CD Backend-api termin√© avec succ√®s !*\nüîÅ Branche: `${{ github.ref_name }}`\nüèó Build: `${{ env.BUILD_NUMBER }}`\nüîó [Voir le workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *√âchec du pipeline CI/CD Backend-api* ‚ùóÔ∏è\nüîÅ Branche: `${{ github.ref_name }}`\nüîó [Voir les logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
