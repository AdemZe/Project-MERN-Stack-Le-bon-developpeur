name: Pipeline CI/CD Backend-api

env:
  BUILD_NUMBER: ${{ github.run_number }}  # Build number generated by GitHub Actions
  IMAGE_NAME: backend-api  # Name of the Docker image
  BACKEND_URL: "https://api.lebondeveloppeur.net"  # URL of the backend API

on:
  push:
    branches:
      - main  # Trigger the pipeline when pushing to the 'main' branch

jobs:

  # Unit Tests Job
  test-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4  # Checkout the source code

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Set Node.js version to 18

      - name: Install dependencies
        run: npm install  # Install the project dependencies

      - name: Run unit tests
        run: npm test  # Run unit tests with 'npm test'

  # SonarQube Scan Job
  sonarqube-scan-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: test-job  # Run this job after the 'test-job' is completed
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4  # Checkout the source code

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Set Node.js version to 18

      - name: Install dependencies
        run: npm install  # Install the project dependencies

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master  # Run SonarQube scan for static code analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SonarQube authentication token
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube server URL

  # Security & Code Quality Scan (DevSecOps)
  security-scan:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: sonarqube-scan-job  # Run this job after the 'sonarqube-scan-job' is completed
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  # Checkout the source code

      - name: Install Dependency Scanning Tool (Snyk)
        run: npm install -g snyk  # Install Snyk for vulnerability scanning

      - name: Snyk Authentication
        run: snyk auth ${{ secrets.SNYK_TOKEN }}  # Authenticate with Snyk using the token

      - name: Run Snyk Vulnerability Scan
        run: snyk test  # Run the Snyk vulnerability scan on the dependencies

      # Trivy Security Scan for Docker Image
      - name: Install Trivy
        run: |
          # Download and install Trivy for Docker image vulnerability scanning
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.34.0/trivy_0.34.0_Linux-x86_64.tar.gz | tar -xz -C /usr/local/bin

      - name: Run Trivy scan on Docker image
        run: |
          # Build the Docker image
          docker build -t ${{ env.IMAGE_NAME }} .
          # Run Trivy scan for vulnerabilities (HIGH and CRITICAL severity)
          trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}

  # Build and Push Docker Image Job
  build-and-push-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: security-scan  # Run this job after the 'security-scan' job is completed
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4  # Checkout the source code

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .  # Build the Docker image from the source code

      - name: Login to Docker Hub
        uses: docker/login-action@v3  # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub username
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Docker Hub token

      - name: Tag Docker image with specific version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}  # Tag Docker image with build number

      - name: Push Docker image with specific version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}  # Push the Docker image with the build number

      - name: Tag Docker image with latest version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest  # Tag Docker image with 'latest'

      - name: Push Docker image with latest version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest  # Push the Docker image with 'latest' tag

  # Deploy to VPS Job
  deploy-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: build-and-push-job  # Run this job after the 'build-and-push-job' is completed
    steps:
      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master  # Use SSH to connect to the VPS
        with:
          host: ${{ secrets.VPS_HOST }}  # VPS host
          username: ${{ secrets.VPS_USERNAME }}  # VPS username
          password: ${{ secrets.VPS_PASSWORD }}  # VPS password
          script: |
            cd /home/ubuntu/devops-scripts/api  # Navigate to the directory containing the app
            sudo git pull  # Pull the latest code from the repository
            sudo docker compose pull  # Pull the latest Docker images
            sudo docker compose up -d --force-recreate --remove-orphans  # Recreate and start the containers
            sudo docker image prune -af  # Clean up unused Docker images

  # Health Check Job
  health-check-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: deploy-job  # Run this job after the 'deploy-job' is completed
    steps:
      - name: Health Check - Verify Backend Availability
        run: |
          # Send a request to the backend API to check if it's healthy
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.BACKEND_URL }}/health)
          echo "Received response code: $response"
          if [ "$response" -ne 200 ]; then
            echo "Health check failed with response code $response"
            exit 1  # Fail the pipeline if the response code is not 200
          else
            echo "Health check passed successfully!"  # Success message if health check passes
          fi

      - name: Notify Slack on Success
        if: success()  # Notify Slack if the job is successful
        uses: slackapi/slack-github-action@v1.23.0  # Use Slack GitHub action to send message
        with:
          payload: |
            {
              "text": "‚úÖ *Pipeline CI/CD Backend-api termin√© avec succ√®s !*\nüîÅ Branche: `${{ github.ref_name }}`\nüèó Build: `${{ env.BUILD_NUMBER }}`\nüîó [Voir le workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}  # Slack webhook URL for notifications

      - name: Notify Slack on Failure
        if: failure()  # Notify Slack if the job fails
        uses: slackapi/slack-github-action@v1.23.0  # Use Slack GitHub action to send message
        with:
          payload: |
            {
              "text": "‚ùå *√âchec du pipeline CI/CD Backend-api* ‚ùóÔ∏è\nüîÅ Branche: `${{ github.ref_name }}`\nüîó [Voir les logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}  # Slack webhook URL for notifications
